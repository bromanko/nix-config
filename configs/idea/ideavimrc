let mapleader=" "

" plugins
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'machakann/vim-highlightedyank'

" Search g by default
set gdefault

" Highlight search results
set hlsearch

" If a pattern contains an uppercase letter, searching is case sensitive,
" otherwise, it is not.
set ignorecase
set smartcase

" Search as characters are entered
set incsearch

" Show relative line number
set relativenumber

" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Refactor when joining lines
set ideajoin

" Show current vim mode in status bar
set showmode

" Show partial command in status bar
set showcmd

" Use the clipboard register '*' for all yank, delete, change and put operations
" which would normally go to the unnamed register.
set clipboard+=unnamed

" which-key configuration
set which-key
set notimeout
set g:WhichKey_ShowVimActions = "true"

"
" Doom emacs style mappings
" Inspired by https://github.com/MarcoIeni/intellimacs

" Execute an action. Like <M-x>
let g:WhichKeyDesc_Leader_Space = "<leader><Space> M-x"
nnoremap <leader><Space>    :action GotoAction<CR>
vnoremap <leader><Space>    :action GotoAction<CR>

""" Applications --------------------------------
let g:WhichKeyDesc_Applications = "<leader>a    +applications"

" Plugins screen
let g:WhichKeyDesc_Applications_Plugins = "<leader>ak plugins"
nnoremap <leader>ak    :action WelcomeScreen.Plugins<CR>
vnoremap <leader>ak    :action WelcomeScreen.Plugins<CR>


""" Buffers --------------------------------
let g:WhichKeyDesc_Buffers = "<leader>b    +buffers"

" Switch among recently opened files
let g:WhichKeyDesc_Buffers_ListBuffers = "<leader>bb    list-buffers"
nnoremap <leader>bb    :action RecentFiles<CR>
vnoremap <leader>bb    :action RecentFiles<CR>

" Close current tab
let g:WhichKeyDesc_Buffers_KillBuffer = "<leader>bd    kill-buffer"
nnoremap <leader>bd    :action CloseContent<CR>
vnoremap <leader>bd    <Esc>:action CloseContent<CR>

" Show event log
let g:WhichKeyDesc_Buffers_MessagesBuffer = "<leader>bm    messages-buffer"
nnoremap <leader>bm    :action ActivateEventLogToolWindow<CR>
vnoremap <leader>bm    :action ActivateEventLogToolWindow<CR>

" Next Tab
let g:WhichKeyDesc_Buffers_NextBuffer = "<leader>bn    next-buffer"
nnoremap <leader>bn    :action NextTab<CR>
vnoremap <leader>bn    <Esc>:action NextTab<CR>

" Substitute the whole content of the buffer with the content of your clipboard
let g:WhichKeyDesc_Buffers_PasteAndReplaceBuffer = "<leader>bP    paste-and-replace-buffer"
nnoremap <leader>bP    ggVGp<CR>
vnoremap <leader>bP    <Esc>ggVGp<CR>

" Previous Tab
let g:WhichKeyDesc_Buffers_PreviousBuffer = "<leader>bp    previous-buffer"
nnoremap <leader>bp    :action PreviousTab<CR>
vnoremap <leader>bp    <Esc>:action PreviousTab<CR>

" Open a new scratch buffer
let g:WhichKeyDesc_Buffers_ScratchBuffer = "<leader>bs    scratch-buffer"
nnoremap <leader>bs    :action NewScratchBuffer<CR>
vnoremap <leader>bs    <Esc>:action NewScratchBuffer<CR>

" Reopen last closed tab
let g:WhichKeyDesc_Buffers_ReopenLastKilledBuffer = "<leader>bu    reopen-last-killed-buffer"
nnoremap <leader>bu    :action ReopenClosedTab<CR>
vnoremap <leader>bu    <Esc>:action ReopenClosedTab<CR>

" Close a window together with its tabs
let g:WhichKeyDesc_Buffers_KillBufferAndCloseWindow = "<leader>bx    kill-buffer-and-close-window"
nnoremap <leader>bx    :action CloseAllEditors<CR>
vnoremap <leader>bx    <Esc>:action CloseAllEditors<CR>

" Copy whole buffer
let g:WhichKeyDesc_Buffers_CopyBuffer = "<leader>bY    copy-buffer"
nnoremap <leader>bY    :%y<CR>
vnoremap <leader>bY    <Esc>:%y<CR>

" Close other tabs in current window
let g:WhichKeyDesc_Buffers_KillOtherBuffers = "<leader>b<C-d>    kill-other-buffers"
nnoremap <leader>b<C-d>    :action CloseAllEditorsButActive<CR>
vnoremap <leader>b<C-d>    :action CloseAllEditorsButActive<CR>

""" Compile/comments ----------------------------
let g:WhichKeyDesc_CompileComments = "<leader>c    +compile/comments"

" Compile selected file, package or module
let g:WhichKeyDesc_CompileComments_Compile = "<leader>cC     compile"
nnoremap <leader>cC    :action Compile<CR>
vnoremap <leader>cC    :action Compile<CR>

" Make project
let g:WhichKeyDesc_CompileComments_CompileDirty = "<leader>cc     compile-dirty"
nnoremap <leader>cc    :action CompileDirty<CR>
vnoremap <leader>cc    :action CompileDirty<CR>

" Reformat code
let g:WhichKeyDesc_CompileComments_ReformatCode = "<leader>cf    reformat-code"
nnoremap <leader>cf    :action ReformatCode<CR>
vnoremap <leader>cf    :action ReformatCode<CR>

" Comment lines
let g:WhichKeyDesc_CompileComments_CommentByLineComment = "<leader>cl     comment-by-line-comment"
nnoremap <leader>cl    :action CommentByLineComment<CR>
vnoremap <leader>cl    :action CommentByLineComment<CR>

" Make module
let g:WhichKeyDesc_CompileComments_MakeModule = "<leader>cm     make-module"
nnoremap <leader>cm    :action MakeModule<CR>
vnoremap <leader>cm    :action MakeModule<CR>

" Comment paragraph
let g:WhichKeyDesc_CompileComments_CommentParagraphByLineComment = "<leader>cp     comment-paragraph-by-line-comment"
nnoremap <leader>cp    vip:action CommentByLineComment<CR>
vnoremap <leader>cp    <Esc>vip:action CommentByLineComment<CR>

" Quick documentation
let g:WhichKeyDesc_CompileComments_QuickJavaDoc = "<leader>ct    quick-documentation"
nnoremap <leader>ct    :action QuickJavaDoc<CR>
vnoremap <leader>ct    :action QuickJavaDoc<CR>

" Copy and comment current line
let g:WhichKeyDesc_CompileComments_CopyAndCommentCurrentLine = "<leader>cy     copy-and-comment-current-line"
nnoremap <leader>cy    yyP:action CommentByLineComment<CR>
vnoremap <leader>cy    <Esc>yyP:action CommentByLineComment<CR>

""" Errors --------------------------------------
let g:WhichKeyDesc_Errors = "<leader>e    +errors"
" List errors
let g:WhichKeyDesc_Errors_ListErrors = "<leader>el list-errors"
nnoremap <leader>el    :action CodeInspection.OnEditor<CR>
vnoremap <leader>el    :action CodeInspection.OnEditor<CR>

" Go to previous error
let g:WhichKeyDesc_Errors_PreviousError = "<leader>eN previous-error"
nnoremap <leader>eN    :action GotoPreviousError<CR>
vnoremap <leader>eN    <Esc>:action GotoPreviousError<CR>

" Go to next error
let g:WhichKeyDesc_Errors_NextError = "<leader>en next-error"
nnoremap <leader>en    :action GotoNextError<CR>
vnoremap <leader>en    <Esc>:action GotoNextError<CR>

" Go to previous error
let g:WhichKeyDesc_Errors_PreviousErrorAlt = "<leader>ep previous-error"
nnoremap <leader>ep    :action GotoPreviousError<CR>
vnoremap <leader>ep    <Esc>:action GotoPreviousError<CR>

" Edit inspection settings
let g:WhichKeyDesc_Errors_OpenInspectionSettings = "<leader>es inspection-settings"
nnoremap <leader>es    :action PopupHector<CR>
vnoremap <leader>es    :action PopupHector<CR>

" Explain error at cursor
let g:WhichKeyDesc_Errors_ExplainError = "<leader>ex explain-error"
nnoremap <leader>ex    :action ShowErrorDescription<CR>
vnoremap <leader>ex    :action ShowErrorDescription<CR>

""" Files ---------------------------------------
let g:WhichKeyDesc_Files = "<leader>f    +files"
""" IDE Submenu ---------------------------------
let g:WhichKeyDesc_Files_IDE = "<leader>fe +IDE"

" Show settings
let g:WhichKeyDesc_Files_IDE_Settings = "<leader>fed settings"
nnoremap <leader>fed    :action ShowSettings<CR>
vnoremap <leader>fed    <Esc>:action ShowSettings<CR>

" Reload .ideavimrc
let g:WhichKeyDesc_Files_IDE_ReloadIdeaVimRc = "<leader>feR reload-ideavimrc"
nnoremap <leader>feR    :source ~/.ideavimrc<CR>
vnoremap <leader>feR    <Esc>:source ~/.ideavimrc<CR>
""" ---------------------------------------------

" Find files
let g:WhichKeyDesc_Files_GotoFileAlt = "<leader>fF goto-file"
nnoremap <leader>fF    :action GotoFile<CR>
vnoremap <leader>fF    :action GotoFile<CR>
let g:WhichKeyDesc_Files_GotoFile = "<leader>ff goto-file"
nnoremap <leader>ff    :action GotoFile<CR>
vnoremap <leader>ff    :action GotoFile<CR>

" Rename file
let g:WhichKeyDesc_Files_Rename = "<leader>fR rename"
nnoremap <leader>fR    :action RenameFile<CR>
vnoremap <leader>fR    :action RenameFile<CR>

" Recent files
let g:WhichKeyDesc_Files_Recent = "<leader>fr recent"
nnoremap <leader>fr    :action RecentFiles<CR>
vnoremap <leader>fr    :action RecentFiles<CR>

" Save all files
let g:WhichKeyDesc_Files_SaveAll = "<leader>fS save-all"
nnoremap <leader>fS    :action SaveAll<CR>
vnoremap <leader>fS    :action SaveAll<CR>

" Save single file (I think that Intellij autosaves anything by default anyway)
let g:WhichKeyDesc_Files_Save = "<leader>fs save"
nnoremap <leader>fs    :action SaveDocument<CR>
vnoremap <leader>fs    :action SaveDocument<CR>

" Focus on project window.
" Sadly when you are inside the project window this key binding does not work
" anymore. You can use <A-1> if you want to close the window or <Esc> if you
" want to leave the window opened and focus on the code.
" let g:WhichKeyDesc_Files_FileTree = "<leader>ft file-tree"
" nnoremap <leader>ft    :action ActivateProjectToolWindow<CR>
" vnoremap <leader>ft    :action ActivateProjectToolWindow<CR>

""" Yank/Copy Submenu ---------------------------------
let g:WhichKeyDesc_Files_YankCopy = "<leader>fy +Yank/Copy"

" Copy file path
let g:WhichKeyDesc_Files_YankCopy_FilePath = "<leader>fyy file-path"
nnoremap <leader>fyy    :action CopyAbsolutePath<CR>
vnoremap <leader>fyy    :action CopyAbsolutePath<CR>
""" ---------------------------------------------------

""" Frame ---------------------------------------------
let g:WhichKeyDesc_Frame = "<leader>F    +frame"

" Focus next project
let g:WhichKeyDesc_Frame_NextProjectWindow = "<leader>Fo next-project-window"
nnoremap <leader>Fo    :action NextProjectWindow<CR>
vnoremap <leader>Fo    :action NextProjectWindow<CR>
""" ---------------------------------------------------

""" Git
let g:WhichKeyDesc_GitVcs = "<leader>g    +git/version-control"
" Git clone
let g:WhichKeyDesc_GitVcs_Clone = "<leader>gc clone"
nnoremap <leader>gc    :action Git.Clone<CR>
vnoremap <leader>gc    :action Git.Clone<CR>

""" File Submenu ---------------------------------
let g:WhichKeyDesc_GitVcs_File = "<leader>gf +file"

" Show log of current file
let g:WhichKeyDesc_GitVcs_File_Log = "<leader>gfl log"
nnoremap <leader>gfl    :action Vcs.ShowTabbedFileHistory<CR>
vnoremap <leader>gfl    :action Vcs.ShowTabbedFileHistory<CR>
""" ---------------------------------------------

" Git init
let g:WhichKeyDesc_GitVcs_Init = "<leader>gi init"
nnoremap <leader>gi    :action Git.Init<CR>
vnoremap <leader>gi    :action Git.Init<CR>

" Show local changes (git status)
let g:WhichKeyDesc_GitVcs_Status = "<leader>gs status"
nnoremap <leader>gs    :action Vcs.Show.Local.Changes<CR>
vnoremap <leader>gs    :action Vcs.Show.Local.Changes<CR>

""" VCS Submenu ---------------------------------
let g:WhichKeyDesc_GitVcs_VersionControl = "<leader>gv +version-control"

" Update project (git pull)
let g:WhichKeyDesc_GitVcs_Vcs_Pull = "<leader>gv+ pull"
nnoremap <leader>gv+    :action Vcs.UpdateProject<CR>
vnoremap <leader>gv+    :action Vcs.UpdateProject<CR>

" Annotate. Show when each line was last edited and by whom.
let g:WhichKeyDesc_GitVcs_Vcs_Annotate = "<leader>gvg annotate"
nnoremap <leader>gvg    :action Annotate<CR>
vnoremap <leader>gvg    :action Annotate<CR>

" Show log (git log)
let g:WhichKeyDesc_GitVcs_Vcs_Log = "<leader>gvl log"
nnoremap <leader>gvl    :action Vcs.Show.Log<CR>
vnoremap <leader>gvl    :action Vcs.Show.Log<CR>
""" ---------------------------------------------

""" Help ----------------------------------------
let g:WhichKeyDesc_Help = "<leader>h    +help"
" Show key bindings
let g:WhichKeyDesc_Help_ShowKeyBindings = "<leader>hk show-key-bindings"
nnoremap <leader>hk     :map<CR>
vnoremap <leader>hk     <Esc>:map<CR>

""" Describe Submenu ---------------------------------
let g:WhichKeyDesc_Help_Describe = "<leader>hd +describe"

let g:WhichKeyDesc_Help_Describe_Bindings = "<leader>hdb describe-bindings"
nnoremap <leader>hdb    :map<CR>
vnoremap <leader>hdb    <Esc>:map<CR>

let g:WhichKeyDesc_Help_Describe_Key = "<leader>hdk describe-key"
nnoremap <leader>hdk    :map<CR>
vnoremap <leader>hdk    <Esc>:map<CR>
""" ---------------------------------------------

" JetBrains Plugins Repository
let g:WhichKeyDesc_Help_PluginDevelopment = "<leader>hp plugin-development"
nnoremap <leader>hp    :action WelcomeScreen.DevelopPlugins<CR>
vnoremap <leader>hp    :action WelcomeScreen.DevelopPlugins<CR>

" Visit Intellij documentation website
let g:WhichKeyDesc_Help_ContextualHelp = "<leader>hr contextual-help"
nnoremap <leader>hr          :action ContextHelp<CR>
vnoremap <leader>hr          :action ContextHelp<CR>
let g:WhichKeyDesc_Help_ContextualHelpAlt = "<leader>h<Space> contextual-help"
nnoremap <leader>h<Space>    :action ContextHelp<CR>
vnoremap <leader>h<Space>    :action ContextHelp<CR>
""" ---------------------------------------------


""" Major mode ----------------------------------
let g:WhichKeyDesc_Major = "<leader>m +major-mode-commands"

let g:WhichKeyDesc_Major_Compile = "<leader>mc +compile"

let g:WhichKeyDesc_Major_Debug = "<leader>md +debug"

let g:WhichKeyDesc_Major_Goto = "<leader>mg +goto"

let g:WhichKeyDesc_Major_Help = "<leader>mh +help"

let g:WhichKeyDesc_Major_Format = "<leader>m= +format"

let g:WhichKeyDesc_Major_Project = "<leader>mp +project"

let g:WhichKeyDesc_Major_Refactoring = "<leader>mr +refactor"
""" ---------------------------------------------


""" Refactoring ---------------------------------
" Code cleanup
let g:WhichKeyDesc_Major_Refactoring_CodeCleanup = "<leader>mrC code-cleanup"
nnoremap <leader>mrC      :action CodeCleanup<CR>
vnoremap <leader>mrC      :action CodeCleanup<CR>

" Create constructor
let g:WhichKeyDesc_Major_Refactoring_CreateConstructor = "<leader>mrc create-constructor"
nnoremap <leader>mrc      :action GenerateConstructor<CR>
vnoremap <leader>mrc      <Esc>:action GenerateConstructor<CR>

""" Extract Submenu ---------------------------------
let g:WhichKeyDesc_Major_Refactoring_CodeCleanup_Extract = "<leader>mre +extract"

" Extract method
let g:WhichKeyDesc_Major_Refactoring_CodeCleanup_Extract_Method = "<leader>mrem method"
nnoremap <leader>mrem    :action ExtractMethod<CR>
vnoremap <leader>mrem    <Esc>:action ExtractMethod<CR>

" Extract superclass
let g:WhichKeyDesc_Major_Refactoring_CodeCleanup_Extract_Superclass = "<leader>mres superclass"
nnoremap <leader>mres    :action ExtractSuperclass<CR>
vnoremap <leader>mres    <Esc>:action ExtractSuperclass<CR>
""" ---------------------------------------------

" Generate getter and setter
let g:WhichKeyDesc_Major_Refactoring_GenerateGetterSetter = "<leader>mrG generate-getter-setter"
nnoremap <leader>mrG      :action GenerateGetterAndSetter<CR>
vnoremap <leader>mrG      <Esc>:action GenerateGetterAndSetter<CR>

" Select what to generate
let g:WhichKeyDesc_Major_Refactoring_Generate = "<leader>mrg generate"
nnoremap <leader>mrg      :action Generate<CR>
vnoremap <leader>mrg      <Esc>:action Generate<CR>

" Implement Methods
let g:WhichKeyDesc_Major_Refactoring_ImplementMethods = "<leader>mrI implement-methods"
nnoremap <leader>mrI      :action ImplementMethods<CR>
vnoremap <leader>mrI      <Esc>:action ImplementMethods<CR>

" Optimize imports
let g:WhichKeyDesc_Major_Refactoring_OptimizeImports = "<leader>mri optimize-imports"
nnoremap <leader>mri      :action OptimizeImports<CR>
vnoremap <leader>mri      <Esc>:action OptimizeImports<CR>

" Create a new Element.
let g:WhichKeyDesc_Major_Refactoring_NewElement = "<leader>mrN new-element"
nnoremap <leader>mrN      :action NewElement<CR>
vnoremap <leader>mrN      :action NewElement<CR>

" Create a new class. You can also create enum, interface and more.
let g:WhichKeyDesc_Major_Refactoring_NewClass = "<leader>mrn new-class"
nnoremap <leader>mrn      :action NewClass<CR>
vnoremap <leader>mrn      :action NewClass<CR>

" Choose a refactoring action
let g:WhichKeyDesc_Major_Refactoring_ChooseRefactoringAction = "<leader>mrR choose-refactoring-action"
nnoremap <leader>mrR      :action Refactorings.QuickListPopupAction<CR>
vnoremap <leader>mrR      <Esc>:action Refactorings.QuickListPopupAction<CR>

" Rename symbol
let g:WhichKeyDesc_Major_Refactoring_RenameSymbol = "<leader>mrr rename-symbol"
nnoremap <leader>mrr      :action RenameElement<CR>
vnoremap <leader>mrr      :action RenameElement<CR>
""" ---------------------------------------------


""" Search ----------------------------------
let g:WhichKeyDesc_SearchSymbol = "<leader>s    +search/symbol"

" Search everywhere
let g:WhichKeyDesc_SearchSymbol_SearchEverywhere = "<leader>sE search-everywhere"
nnoremap <leader>sE    :action SearchEverywhere<CR>
vnoremap <leader>sE    :action SearchEverywhere<CR>

" Search in current file by using Intellij Search
let g:WhichKeyDesc_SearchSymbol_FindInFile = "<leader>sf find-in-file"
nnoremap <leader>sf    :action Find<CR>
vnoremap <leader>sf    :action Find<CR>

" Search and replace in current file by using Intellij Search
let g:WhichKeyDesc_SearchSymbol_ReplaceInFile = "<leader>sr replace-in-file"
nnoremap <leader>sr    :action Replace<CR>
vnoremap <leader>sr    :action Replace<CR>

" Clear search highlights.
let g:WhichKeyDesc_SearchSymbol_ClearHighlight = "<leader>sc clear-highlight"
nnoremap <leader>sc    :nohlsearch<CR>
vnoremap <leader>sc    <Esc>:nohlsearch<CR>

" Rename symbol
let g:WhichKeyDesc_SearchSymbol_RenameElement = "<leader>se rename-element"
nnoremap <leader>se    :action RenameElement<CR>
vnoremap <leader>se    :action RenameElement<CR>

" Highlight current symbol. Do it again to toggle highlight.
let g:WhichKeyDesc_SearchSymbol_HighlightUsages = "<leader>sh highlight-usages"
nnoremap <leader>sh    :action HighlightUsagesInFile<CR>
vnoremap <leader>sh    <Esc>:action HighlightUsagesInFile<CR>

" Find usages
let g:WhichKeyDesc_SearchSymbol_FindUsages = "<leader>sP find-usages"
nnoremap <leader>sP    :action FindUsages<CR>
vnoremap <leader>sP    :action FindUsages<CR>

" Search in project.
let g:WhichKeyDesc_SearchSymbol_SearchProject = "<leader>sp search-project"
nnoremap <leader>sp    :action FindInPath<CR>
vnoremap <leader>sp    :action FindInPath<CR>
let g:WhichKeyDesc_SearchSymbol_ResumeLastSearch = "<leader>sl resume-last-search"
nnoremap <leader>sl    :action FindInPath<CR>
vnoremap <leader>sl    :action FindInPath<CR>
let g:WhichKeyDesc_SearchSymbol_Swoop = "<leader>ss swoop"
nnoremap <leader>ss    :action FindInPath<CR>
vnoremap <leader>ss    :action FindInPath<CR>
""" ---------------------------------------------
